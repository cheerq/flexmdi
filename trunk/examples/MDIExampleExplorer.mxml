<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	xmlns:flexmdi="http://flexmdi.googlecode.com/"
	creationComplete="onCreationComplete()" xmlns:ns="sample_content.*" 
	viewSourceURL="srcview/index.html">
	 
	
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			//import explorer.AddWinForm;
			import mx.managers.PopUpManager;
			import sample_content.SampleContent;
			import flexmdi.effects.effectsLib.MDILinearEffects;
			import flexmdi.effects.MDIEffectsDescriptorBase;
			import mx.controls.TextArea;
			import flexmdi.events.MDIWindowEvent;
			import flexmdi.effects.effectsLib.MDIVistaEffects;
			import flexmdi.events.MDIManagerEvent;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			private var eventMonitor:TextArea;
			private var queuedEvent:MDIManagerEvent;
			private var effectsList:Array;
			private var stylesList:Array;
			
			private var currentSetStyle:String;
			
			private function onCreationComplete():void
			{
				currentSetStyle = '';
				
				// create textfield
				eventMonitor = new TextArea();
				eventMonitor.percentWidth = 100;
				eventMonitor.height = 150;
				
				effectsList = new Array();
				effectsList.push({data: flexmdi.effects.MDIEffectsDescriptorBase, label: "No effects"});
				effectsList.push({data: flexmdi.effects.effectsLib.MDIVistaEffects, label: "Vista"});
				effectsList.push({data: flexmdi.effects.effectsLib.MDILinearEffects, label: "Linear"});
				effectsListCb.dataProvider = effectsList;
				effectsListCb.selectedIndex = 1;
				
				stylesList = new Array();
				stylesList.push({label: "Default"});
				stylesList.push({label: "Windows Default"});
				stylesList.push({label: "Brushed Metal"});
				stylesList.push({label: "Blue"});
				stylesListCb.dataProvider = stylesList;
				stylesListCb.selectedIndex = 0;
				
				// listen for window close
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_CLOSE, confirmWindowClose);
				
				//listen for all window events
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_ADD, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_MINIMIZE, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESTORE, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_MAXIMIZE, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_CLOSE, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_FOCUS_START, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_FOCUS_END, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG_START, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG_END, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE_START, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE, windowEventHandler);
				mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE_END, windowEventHandler);
			}
			
			private function windowEventHandler(event:Event):void
			{
				if(event is MDIManagerEvent)
				{
					var mgrEvent:MDIManagerEvent = event as MDIManagerEvent;
					if(eventMonitor.parent != null)
					{
						eventMonitor.text += mgrEvent.window.title + ": " + event.type + "\n";
						eventMonitor.verticalScrollPosition = eventMonitor.maxVerticalScrollPosition;
						eventMonitor.validateNow();
					}
				}
			}			
			
			// the flex framework dispatches all kinds of events
			// in order to avoid catching one of those and throwing a coercion error
			// have your listener accept Event and check the type inside the function
			// this is good practice for all Flex development, not specific to flexmdi
			private function confirmWindowClose(event:Event):void
			{
				if(event is MDIManagerEvent && confirmCloseCb.selected)
				{
					// this is the line that prevents the default behavior from executing as usual
					event.stopImmediatePropagation();
					// store the event in case we want to resume later (user confirms their intention)
					queuedEvent = event as MDIManagerEvent;
					Alert.show("Seriously? Close it?", null, 3, null, handleAlertResponse);
				}
			}
			
			// called when the Alert window is closed
			// if the user said yes, we execute the default behavior of playing an effect
			// and then removing the window by calling the appropriately named executeDefaultBehavior() method
			private function handleAlertResponse(event:CloseEvent):void
			{
				if(event.detail == mx.controls.Alert.YES)
				{
					mdiCanvas.windowManager.executeDefaultBehavior(queuedEvent);
				}
			}
			
			private function addWindow():void
			{
				var win:MDIWindow = new MDIWindow();
				win.width = 350;
				win.title = "Window " + String(mdiCanvas.windowManager.windowList.length + 1);
				mdiCanvas.windowManager.add(win);
			}
			/*
			private function addWindowDialog():void
			{
				var win:MDIWindow = new AddWinForm();
				PopUpManager.addPopUp(win, this);
				PopUpManager.centerPopUp(win);
			}
			*/
			private function toggleEventMonitor():void
			{
				if(eventMonitorCb.selected)
				{
					vbox.addChildAt(eventMonitor, 1);
				}
				else
				{
					vbox.removeChild(eventMonitor);
				}
			}
			
			private function changeEffects():void
			{
				mdiCanvas.effectsLib = effectsListCb.selectedItem.data as Class;
			}
			
			private function changeStyle(event:ListEvent):void
			{
				switch(ComboBox(event.target).selectedLabel)
				{
					case 'Default' :
						if(currentSetStyle != '') StyleManager.unloadStyleDeclarations(currentSetStyle, false);
						currentSetStyle = '';
						break;
					case 'Windows Default' :
						if(currentSetStyle != '') StyleManager.unloadStyleDeclarations(currentSetStyle, false);
						StyleManager.loadStyleDeclarations('assets/css/MSWindows_default.swf');
						currentSetStyle = 'assets/css/MSWindows_default.swf';
						break;
					case 'Brushed Metal' :
						if(currentSetStyle != '') StyleManager.unloadStyleDeclarations(currentSetStyle, false);
						StyleManager.loadStyleDeclarations('assets/css/BrushedMetal.swf');
						currentSetStyle = 'assets/css/BrushedMetal.swf';
						break;
					case 'Blue' :
						if(currentSetStyle != '') StyleManager.unloadStyleDeclarations(currentSetStyle, false);
						StyleManager.loadStyleDeclarations('assets/css/Blue.swf');
						currentSetStyle = 'assets/css/Blue.swf';
						break;
					default:
						break;
				}
			}
		]]>
	</mx:Script>
	<mx:VBox id="vbox" width="100%" height="100%">
	
		<mx:ApplicationControlBar dock="true" width="100%" height="50" verticalAlign="middle" paddingTop="2">
			<mx:Button label="Add Window" click="addWindow()" />
			<!-- <mx:Button label="+" click="addWindowDialog()" /> -->
			
			<mx:VRule height="35" />
			
			<mx:Button label="Cascade" click="mdiCanvas.windowManager.cascade()" />
			<mx:Button label="Tile" click="mdiCanvas.windowManager.tile(false, Number(tileGap.text))" />
			<mx:Button label="Tile + Fill Space" click="mdiCanvas.windowManager.tile(true, Number(tileGap.text))" />
			<mx:Label text="Tile Gap" />
			<mx:TextInput id="tileGap" text="10" width="30" textAlign="center" />
			
			<mx:VRule height="35" />
			
			<mx:VBox verticalGap="1" paddingTop="1" paddingBottom="1">
				<mx:CheckBox id="eventMonitorCb" label="Show Event Monitor" click="toggleEventMonitor()" />
				<mx:CheckBox id="confirmCloseCb" label="Require Close Confirmation" />
			</mx:VBox>
			
			
			<mx:VRule height="35" />
			
			<mx:Label text="Effects" />
			<mx:ComboBox id="effectsListCb" change="changeEffects()" />
			<mx:ComboBox id="stylesListCb" change="changeStyle(event)" />
		</mx:ApplicationControlBar>
		
		<flexmdi:MDICanvas id="mdiCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off" 
			effects="{new MDIVistaEffects(100)}"
			width="100%" height="100%">
			<flexmdi:MDIWindow id="win1"
				title="Window 1"
				x="30" y="30" width="400" height="200" />
			<flexmdi:MDIWindow id="win2"
				title="Window 2"
				x="450" y="30" width="250" height="300" />
		</flexmdi:MDICanvas>
		
	</mx:VBox>
</mx:Application>